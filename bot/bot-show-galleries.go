package bot

import (
	"database/sql"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

type AuthRequest struct {
	InitData string `json:"initData"`
}

const UPLOADS_PHYSICAL_BASE_PATH = "D:/Golang_Web_App_Bot_Test/uploads/"

func isImageFile(filename string) bool {
	ext := filepath.Ext(filename)
	switch strings.ToLower(ext) {
	case ".jpg", ".jpeg", ".png", ".gif", ".webp":
		return true
	default:
		log.Printf("‚ö†Ô∏è –§–∞–π–ª %s –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: %s)", filename, ext)
		return false
	}
}

func GetUserGalleries(db *sql.DB, userID int64) ([]Gallery, error) {
	var galleries []Gallery

	log.Printf("üîç –ó–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–π –¥–ª—è userID: %d - –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ preview_url.", userID)

	query := `
		SELECT
			g.id,
			g.name,
			g.user_id,
			g.created_at,
			COALESCE(STRING_AGG(t.tag, ',' ORDER BY t.tag), '') AS tags_list,
			COALESCE(g.image_count, 0) AS image_count,
			g.preview_url
		FROM
			galleries g
		LEFT JOIN
			tags t ON g.id = t.gallery_id
		WHERE
			g.user_id = $1
		GROUP BY
			g.id, g.name, g.user_id, g.created_at, g.image_count, g.preview_url
		ORDER BY
			g.id DESC;
	`
	rows, err := db.Query(query, userID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–∞–ª–µ—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var g Gallery
		var tagsStr sql.NullString

		if err := rows.Scan(
			&g.ID, &g.Name, &g.UserID, &g.CreatedAt, &tagsStr, &g.ImageCount, &g.PreviewURL,
		); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			continue
		}

		if tagsStr.Valid && tagsStr.String != "" {
			g.Tags = strings.Split(tagsStr.String, ",")
			for i, tag := range g.Tags {
				g.Tags[i] = strings.TrimSpace(tag)
			}
			g.Tags = filterEmptyStrings(g.Tags)
		} else {
			g.Tags = []string{}
		}

		if g.PreviewURL == "" {
			g.PreviewURL = "/static/no-image-placeholder.png"
		} else {
			if !strings.HasPrefix(g.PreviewURL, "/") {
				g.PreviewURL = "/" + g.PreviewURL
			}
		}
		galleries = append(galleries, g)
	}

	if err := rows.Err(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≥–∞–ª–µ—Ä–µ–π: %v", err)
		return nil, err
	}

	log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ %d –≥–∞–ª–µ—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d.", len(galleries), userID)
	return galleries, nil
}

func filterEmptyStrings(s []string) []string {
	var r []string
	for _, str := range s {
		if str != "" {
			r = append(r, str)
		}
	}
	return r
}

func GetMyGalleriesAPIHandler(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		sessionUserID, exists := c.Get("userID")
		if !exists {
			log.Println("‚ùå GetMyGalleriesAPIHandler: userID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ AuthMiddleware.")
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
			return
		}
		userID, ok := sessionUserID.(int64)
		if !ok || userID <= 0 {
			log.Printf("‚ùå GetMyGalleriesAPIHandler: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ userID: %v", sessionUserID)
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."})
			return
		}

		galleries, err := GetUserGalleries(db, userID)
		if err != nil {
			log.Printf("‚ùå GetMyGalleriesAPIHandler: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –≥–∞–ª–µ—Ä–µ–π."})
			return
		}

		log.Printf("‚úÖ GetMyGalleriesAPIHandler: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã %d –≥–∞–ª–µ—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d.", len(galleries), userID)
		c.JSON(http.StatusOK, gin.H{
			"ok":        true,
			"galleries": galleries,
		})
	}
}

func DeleteGalleryHandler(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("üö® Panic –≤ DeleteGalleryHandler: %v", r)
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			}
		}()

		galleryName := c.Param("galleryName")
		if galleryName == "" {
			c.JSON(http.StatusBadRequest, gin.H{"ok": false, "error": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."})
			return
		}
		sessionUserID, exists := c.Get("userID")
		if !exists {
			log.Println("‚ùå DeleteGalleryHandler: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ userID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
			return
		}
		userID, ok := sessionUserID.(int64)
		if !ok || userID <= 0 {
			log.Printf("‚ùå DeleteGalleryHandler: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ userID: %v", sessionUserID)
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			return
		}

		var folderPath string
		var galleryID int64
		err := db.QueryRow("SELECT id, folder_path FROM galleries WHERE name = $1 AND user_id = $2", galleryName, userID).Scan(&galleryID, &folderPath)
		if err == sql.ErrNoRows {
			log.Printf("‚ö†Ô∏è DeleteGalleryHandler: –ì–∞–ª–µ—Ä–µ—è '%s' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", galleryName, userID)
			c.JSON(http.StatusNotFound, gin.H{"ok": false, "error": "–ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–µ —É–¥–∞–ª–µ–Ω–∏–µ."})
			return
		}
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–∞–ª–µ—Ä–µ–∏ '%s' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", galleryName, userID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–∞–ª–µ—Ä–µ–∏."})
			return
		}

		tx, err := db.Begin()
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			return
		}
		defer func() {
			if r := recover(); r != nil {
				log.Printf("üö® Panic –≤ DeleteGalleryHandler –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", r)
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			}
		}()

		_, err = tx.Exec("DELETE FROM favorites WHERE gallery_id = $1", galleryID)
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d: %v", galleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."})
			return
		}

		_, err = tx.Exec("DELETE FROM gallery_images WHERE gallery_id = $1", galleryID)
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d: %v", galleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."})
			return
		}

		_, err = tx.Exec("DELETE FROM tags WHERE gallery_id = $1", galleryID)
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d: %v", galleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤."})
			return
		}

		_, err = tx.Exec("DELETE FROM galleries WHERE id = $1", galleryID)
		if err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d –∏–∑ –ë–î: %v", galleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."})
			return
		}

		if err := tx.Commit(); err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."})
			return
		}

		log.Printf("DEBUG: Folder path from DB: '%s'", folderPath)
		log.Printf("DEBUG: UPLOADS_PHYSICAL_BASE_PATH: '%s'", UPLOADS_PHYSICAL_BASE_PATH)

		fullPathToDelete := filepath.Join(UPLOADS_PHYSICAL_BASE_PATH, folderPath)
		log.Printf("üìÇ DeleteGalleryHandler: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É: %s", fullPathToDelete)

		if err := os.RemoveAll(fullPathToDelete); err != nil {
			log.Printf("‚ùå DeleteGalleryHandler: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '%s': %v", fullPathToDelete, err)
		}

		log.Printf("‚úÖ DeleteGalleryHandler: –ì–∞–ª–µ—Ä–µ—è '%s' (ID: %d) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d.", galleryName, galleryID, userID)
		c.JSON(http.StatusOK, gin.H{"ok": true, "message": "–ì–∞–ª–µ—Ä–µ—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"})
	}
}

package bot

import (
	db2 "Golang_Web_App_Bot/db"
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
)

func HandleTelegramUpdates(bot *tgbotapi.BotAPI, dbConn *sql.DB) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil && update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				userID := update.Message.From.ID
				username := update.Message.From.UserName
				firstName := update.Message.From.FirstName
				lastName := update.Message.From.LastName
				photoURL := ""

				webAppBaseURL := os.Getenv("WEB_APP_URL")
				if webAppBaseURL == "" {
					log.Println("WEB_APP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
					sendErrorMessage(bot, update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
					continue
				}

				webAppURL := webAppBaseURL

				photoFilePath := "templates/static/image0.jpg"
				if err := sendWelcomePhoto(bot, update.Message.Chat.ID, photoFilePath); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
				}

				if err := sendWebAppMessage(bot, update.Message.Chat.ID, webAppURL); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Web App –∫–Ω–æ–ø–∫–æ–π: %v", err)
				}

				dbUser, err := db2.FindOrCreateUser(
					dbConn,
					int64(userID),
					username,
					firstName,
					lastName,
					photoURL,
				)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: %v", err)
					sendErrorMessage(bot, update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.")
					continue
				}
				log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ë–î: ID=%d, Username:%s, Name:%s %s",
					dbUser.TelegramUserID, dbUser.TelegramUsername.String, dbUser.FirstName.String, dbUser.LastName.String)

			default:
				sendErrorMessage(bot, update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
			}
		} else if update.CallbackQuery != nil {
		}
	}
}

func sendWelcomePhoto(bot *tgbotapi.BotAPI, chatID int64, photoPath string) error {
	if _, err := os.Stat(photoPath); os.IsNotExist(err) {
		return fmt.Errorf("—Ñ–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", photoPath)
	}

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(photoPath))
	photo.Caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –ë–æ—Ç–∞! –í –Ω–µ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏"

	replyKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/start"),
		),
	)
	photo.ReplyMarkup = replyKeyboard

	_, err := bot.Send(photo)
	return err
}

func sendWebAppMessage(bot *tgbotapi.BotAPI, chatID int64, webAppURL string) error {
	inlineBtn := tgbotapi.InlineKeyboardButton{
		Text: "üì± –û—Ç–∫—Ä—ã—Ç—å –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
		WebApp: &tgbotapi.WebAppInfo{
			URL: webAppURL,
		},
	}

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(inlineBtn),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:")
	msg.ReplyMarkup = inlineKeyboard

	_, err := bot.Send(msg)
	return err
}

func sendErrorMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, _ = bot.Send(msg)
}

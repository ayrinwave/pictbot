package bot

import (
	db2 "Golang_Web_App_Bot/db"
	"bytes"
	"database/sql"
	"fmt"
	"github.com/google/uuid"
	initdata "github.com/telegram-mini-apps/init-data-golang"
	"golang.org/x/image/draw"
	"image"
	"image/gif"
	"image/jpeg"
	"image/png"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/nfnt/resize"
	_ "golang.org/x/image/webp"
)

const (
	MAX_CONCURRENT_IMAGE_PROCESSING = 1
	PREVIEW_WIDTH                   uint = 300
	FULL_SIZE_WIDTH                 uint = 1000
	JPEG_QUALITY_PREVIEW                 = 60
	JPEG_QUALITY_FULL                    = 80
)

var BotToken string

func init() {
	err := godotenv.Load()
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ .env: %v (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)", err)
	}

	BotToken = os.Getenv("TELEGRAM_BOT_TOKEN")
	if BotToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ")
	}

	UPLOADS_BASE_PATH_FOR_WRITING = os.Getenv("UPLOAD_PATH")
	if UPLOADS_BASE_PATH_FOR_WRITING == "" {
		UPLOADS_BASE_PATH_FOR_WRITING = "/app/uploads"
		log.Printf("‚ÑπÔ∏è UPLOAD_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s", UPLOADS_BASE_PATH_FOR_WRITING)
	} else {
		log.Printf("‚úÖ UPLOAD_PATH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", UPLOADS_BASE_PATH_FOR_WRITING)
	}

	if err := os.MkdirAll(UPLOADS_BASE_PATH_FOR_WRITING, 0755); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ '%s': %v", UPLOADS_BASE_PATH_FOR_WRITING, err)
	}
}

func saveProcessedImage(inputReader io.Reader, originalFilename string, fullGalleryFolderPath string, dbFolderPath string) (*ImagePaths, error) {
	imageData, err := io.ReadAll(inputReader)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '%s': %w", originalFilename, err)
	}

	img, format, err := image.Decode(bytes.NewReader(imageData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '%s': %w", originalFilename, err)
	}

	baseFileName := fmt.Sprintf("%s_%s",
		sanitizeFilename(strings.TrimSuffix(originalFilename, filepath.Ext(originalFilename))),
		generateShortUUID())

	var resultPaths ImagePaths

	previewImg := resize.Resize(PREVIEW_WIDTH, 0, img, resize.Lanczos3)
	previewFileName := baseFileName + "_preview.jpg"
	previewAbsPath := filepath.Join(fullGalleryFolderPath, previewFileName)

	if err := saveJPG(previewImg, previewAbsPath, JPEG_QUALITY_PREVIEW); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—å—é '%s': %w", previewAbsPath, err)
	}
	resultPaths.PreviewPath = filepath.ToSlash(filepath.Join(dbFolderPath, previewFileName))
	log.Printf("DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–µ–≤—å—é: %s (DB: %s)", previewAbsPath, resultPaths.PreviewPath)

	var fullSizeFileName string
	var fullSizeAbsPath string

	switch format {
	case "png":
		fullSizeFileName = baseFileName + "_full.png"
		fullSizeAbsPath = filepath.Join(fullGalleryFolderPath, fullSizeFileName)
		fullSizeImg := resize.Resize(FULL_SIZE_WIDTH, 0, img, resize.Lanczos3)
		if err := savePNG(fullSizeImg, fullSizeAbsPath); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏ PNG '%s': %w", fullSizeAbsPath, err)
		}
	case "gif":
		fullSizeFileName = baseFileName + "_full.gif"
		fullSizeAbsPath = filepath.Join(fullGalleryFolderPath, fullSizeFileName)

		gifImg, err := gif.DecodeAll(bytes.NewReader(imageData))
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ GIF '%s': %w", originalFilename, err)
		}

		if FULL_SIZE_WIDTH > 0 && uint(gifImg.Config.Width) > FULL_SIZE_WIDTH {
			newFrames := make([]*image.Paletted, len(gifImg.Image))
			for i, frame := range gifImg.Image {
				resizedFrame := resize.Resize(FULL_SIZE_WIDTH, 0, frame, resize.Lanczos3)
				if palettedFrame, ok := resizedFrame.(*image.Paletted); ok {
					newFrames[i] = palettedFrame
				} else {
					paletted := image.NewPaletted(resizedFrame.Bounds(), gifImg.Image[0].Palette)
					draw.Draw(paletted, paletted.Bounds(), resizedFrame, resizedFrame.Bounds().Min, draw.Src)
					newFrames[i] = paletted
				}
			}
			gifImg.Image = newFrames
			gifImg.Config.Width = int(FULL_SIZE_WIDTH)
			if len(newFrames) > 0 {
				gifImg.Config.Height = newFrames[0].Bounds().Dy()
			}
		}

		if err := saveAnimatedGIF(gifImg, fullSizeAbsPath); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ GIF '%s': %w", fullSizeAbsPath, err)
		}

	case "webp", "bmp":
		fullSizeFileName = baseFileName + "_full.jpg"
		fullSizeAbsPath = filepath.Join(fullGalleryFolderPath, fullSizeFileName)
		fullSizeImg := resize.Resize(FULL_SIZE_WIDTH, 0, img, resize.Lanczos3)
		if err := saveJPG(fullSizeImg, fullSizeAbsPath, JPEG_QUALITY_FULL); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏ WebP/BMP –≤ JPG '%s': %w", fullSizeAbsPath, err)
		}
	case "jpeg":
		fallthrough
	default:
		fullSizeFileName = baseFileName + "_full.jpg"
		fullSizeAbsPath = filepath.Join(fullGalleryFolderPath, fullSizeFileName)
		fullSizeImg := resize.Resize(FULL_SIZE_WIDTH, 0, img, resize.Lanczos3)
		if err := saveJPG(fullSizeImg, fullSizeAbsPath, JPEG_QUALITY_FULL); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏ JPG '%s': %w", fullSizeAbsPath, err)
		}
	}

	resultPaths.FullSizePath = filepath.ToSlash(filepath.Join(dbFolderPath, fullSizeFileName))
	log.Printf("DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s (DB: %s)", fullSizeAbsPath, resultPaths.FullSizePath)

	return &resultPaths, nil
}

func saveAnimatedGIF(gifImg *gif.GIF, filePath string) error {
	out, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer out.Close()

	return gif.EncodeAll(out, gifImg)
}

func saveJPG(img image.Image, filePath string, quality int) error {
	out, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer out.Close()

	var opt jpeg.Options
	opt.Quality = quality

	return jpeg.Encode(out, img, &opt)
}

func savePNG(img image.Image, filePath string) error {
	out, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer out.Close()
	return png.Encode(out, img)
}

func AddGalleryHandler(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("üö® Panic –≤ AddGalleryHandler: %v", r)
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			}
		}()

		sessionUserID, exists := c.Get("userID")
		if !exists {
			log.Println("‚ùå AddGalleryHandler: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ userID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
			return
		}
		userID, ok := sessionUserID.(int64)
		if !ok || userID <= 0 {
			log.Printf("‚ùå AddGalleryHandler: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ userID: %v", sessionUserID)
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			return
		}

		telegramUsername, _ := c.Get("telegramUsername")
		usernameStr, _ := telegramUsername.(string)

		var existingUserDBID int64
		err := db.QueryRow("SELECT telegram_user_id FROM users WHERE telegram_user_id = $1", userID).Scan(&existingUserDBID)
		if err == sql.ErrNoRows {
			_, err := db.Exec("INSERT INTO users (telegram_user_id, telegram_username, created_at) VALUES ($1, $2, $3)",
				userID, usernameStr, time.Now())
			if err != nil {
				log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v", userID, err)
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
				return
			}
			log.Printf("‚úÖ AddGalleryHandler: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=%d –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.", userID)
		} else if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v", userID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			return
		}

		galleryName := c.PostForm("galleryName")
		if galleryName == "" {
			log.Println("‚ùå AddGalleryHandler: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
			c.JSON(http.StatusBadRequest, gin.H{"ok": false, "error": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
			return
		}
		cleanGalleryName := sanitizeFilename(galleryName)

		exists, err = GalleryExistsForUser(db, cleanGalleryName, userID)
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ '%s' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", cleanGalleryName, userID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–∞–ª–µ—Ä–µ–∏."})
			return
		}
		if exists {
			log.Printf("‚ö†Ô∏è AddGalleryHandler: –ì–∞–ª–µ—Ä–µ—è '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d.", cleanGalleryName, userID)
			c.JSON(http.StatusConflict, gin.H{"ok": false, "error": "–ì–∞–ª–µ—Ä–µ—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
			return
		}

		tx, err := db.Begin()
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			return
		}
		defer func() {
			if r := recover(); r != nil {
				log.Printf("üö® Panic –≤ AddGalleryHandler –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", r)
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			}
		}()
		var newGalleryID int64
		insertGalleryQuery := `INSERT INTO galleries (name, user_id, folder_path) VALUES ($1, $2, '') RETURNING id`
		err = tx.QueryRow(insertGalleryQuery, cleanGalleryName, userID).Scan(&newGalleryID)
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –≤ –ë–î (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –ø–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞): %v", err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"})
			return
		}
		log.Printf("‚úÖ AddGalleryHandler: –ì–∞–ª–µ—Ä–µ—è '%s' (ID: %d) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î (–≤—Ä–µ–º–µ–Ω–Ω—ã–π folder_path).", cleanGalleryName, newGalleryID)

		fullGalleryFolderPath := filepath.Join(UPLOADS_BASE_PATH_FOR_WRITING, "gallery_images", strconv.FormatInt(newGalleryID, 10))
		log.Printf("üìÇ AddGalleryHandler: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: %s", fullGalleryFolderPath)

		if err := os.MkdirAll(fullGalleryFolderPath, 0755); err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v", fullGalleryFolderPath, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"})
			return
		}

		dbFolderPath := filepath.Join("gallery_images", strconv.FormatInt(newGalleryID, 10))
		log.Printf("DEBUG: folder_path, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –≤ –ë–î: %s", dbFolderPath)

		updateFolderPathQuery := `UPDATE galleries SET folder_path = $1 WHERE id = $2`
		_, err = tx.Exec(updateFolderPathQuery, dbFolderPath, newGalleryID)
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è folder_path –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d: %v", newGalleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –≥–∞–ª–µ—Ä–µ–∏"})
			return
		}
		log.Printf("‚úÖ AddGalleryHandler: –û–±–Ω–æ–≤–ª–µ–Ω folder_path: '%s' –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d.", dbFolderPath, newGalleryID)

		form, err := c.MultipartForm()
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ multipart —Ñ–æ—Ä–º—ã: %v", err)
			tx.Rollback()
			if err := os.RemoveAll(fullGalleryFolderPath); err != nil {
				log.Printf("‚ö†Ô∏è AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ '%s' –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v", fullGalleryFolderPath, err)
			}
			c.JSON(http.StatusBadRequest, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"})
			return
		}

		files := form.File["galleryImages"]
		if len(files) == 0 {
			log.Println("‚ùå AddGalleryHandler: –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
			tx.Rollback()
			if err := os.RemoveAll(fullGalleryFolderPath); err != nil {
				log.Printf("‚ö†Ô∏è AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ '%s': %v", fullGalleryFolderPath, err)
			}
			c.JSON(http.StatusBadRequest, gin.H{"ok": false, "error": "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"})
			return
		}
		if len(files) > 10 {
			log.Printf("‚ùå AddGalleryHandler: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ (%d), –º–∞–∫—Å–∏–º—É–º 10.", len(files))
			tx.Rollback()
			if err := os.RemoveAll(fullGalleryFolderPath); err != nil {
				log.Printf("‚ö†Ô∏è AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ '%s': %v", fullGalleryFolderPath, err)
			}
			c.JSON(http.StatusBadRequest, gin.H{"ok": false, "error": "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–∞–π–ª–æ–≤."})
			return
		}

		const maxFileSize = 32 << 20
		var wg sync.WaitGroup
		var savedFileCount int32
		var imageErrors []error
		errChan := make(chan error, len(files))
		imagePathsToDBChan := make(chan *ImagePaths, len(files))

		sem := make(chan struct{}, MAX_CONCURRENT_IMAGE_PROCESSING)

		var firstGalleryPreviewURL atomic.Value
		firstGalleryPreviewURL.Store("")

		for _, fileHeader := range files {
			wg.Add(1)
			sem <- struct{}{}
			go func(fileHeader *multipart.FileHeader) {
				defer wg.Done()
				defer func() { <-sem }()

				if fileHeader.Size > maxFileSize {
					errChan <- fmt.Errorf("—Ñ–∞–π–ª '%s' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (%s), –ø—Ä–æ–ø—É—â–µ–Ω", fileHeader.Filename, byteCountToHuman(fileHeader.Size))
					return
				}
				if !isImageFile(fileHeader.Filename) {
					errChan <- fmt.Errorf("—Ñ–∞–π–ª '%s' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ø—Ä–æ–ø—É—â–µ–Ω", fileHeader.Filename)
					return
				}

				src, err := fileHeader.Open()
				if err != nil {
					errChan <- fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ '%s': %v", fileHeader.Filename, err)
					return
				}
				defer src.Close()

				processedPaths, err := saveProcessedImage(src, fileHeader.Filename, fullGalleryFolderPath, dbFolderPath)
				if err != nil {
					errChan <- fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '%s': %v", fileHeader.Filename, err)
					return
				}

				currentSavedCount := atomic.AddInt32(&savedFileCount, 1)
				log.Printf("‚úÖ AddGalleryHandler (Goroutine): –§–∞–π–ª '%s' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. Full: %s, Preview: %s",
					fileHeader.Filename, processedPaths.FullSizePath, processedPaths.PreviewPath)

				if currentSavedCount == 1 {
					firstGalleryPreviewURL.Store(processedPaths.PreviewPath)
					log.Printf("DEBUG: –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è PreviewURL –≥–∞–ª–µ—Ä–µ–∏: %s", processedPaths.PreviewPath)
				}

				imagePathsToDBChan <- processedPaths
			}(fileHeader)
		}

		wg.Wait()
		close(errChan)
		close(imagePathsToDBChan)

		for err := range errChan {
			imageErrors = append(imageErrors, err)
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
		}

		if atomic.LoadInt32(&savedFileCount) == 0 {
			log.Printf("‚ùå AddGalleryHandler: –ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ '%s'. –û—Ç–∫–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.", cleanGalleryName)
			if err := os.RemoveAll(fullGalleryFolderPath); err != nil {
				log.Printf("‚ö†Ô∏è AddGalleryHandler: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ '%s': %v", fullGalleryFolderPath, err)
			}
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞."})
			return
		}

		finalPreviewURL := firstGalleryPreviewURL.Load().(string)

		if finalPreviewURL == "" {
			finalPreviewURL = "/static/no-image-placeholder.png"
		}

		updateGalleryQuery := `
			UPDATE galleries
			SET preview_url = $1, image_count = $2
			WHERE id = $3;
		`
		_, err = tx.Exec(updateGalleryQuery, finalPreviewURL, atomic.LoadInt32(&savedFileCount), newGalleryID)
		if err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è preview_url/image_count –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d: %v", newGalleryID, err)
			tx.Rollback()
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏"})
			return
		}
		log.Printf("‚úÖ AddGalleryHandler: –û–±–Ω–æ–≤–ª–µ–Ω preview_url: '%s' –∏ image_count: %d –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d.", finalPreviewURL, atomic.LoadInt32(&savedFileCount), newGalleryID)

		allProcessedPaths := make([]*ImagePaths, 0, atomic.LoadInt32(&savedFileCount))
		for processedPaths := range imagePathsToDBChan {
			allProcessedPaths = append(allProcessedPaths, processedPaths)
		}

		if len(allProcessedPaths) > 0 {
			stmt, err := tx.Prepare(`
				INSERT INTO gallery_images (gallery_id, full_size_image_path, preview_image_path, created_at)
				VALUES ($1, $2, $3, $4)
			`)
			if err != nil {
				log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %v", err)
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"})
				return
			}
			defer stmt.Close()

			for _, p := range allProcessedPaths {
				_, err := stmt.Exec(newGalleryID, p.FullSizePath, p.PreviewPath, time.Now())
				if err != nil {
					log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (full: '%s', preview: '%s') –≤ –ë–î –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ %d: %v", p.FullSizePath, p.PreviewPath, newGalleryID, err)
					tx.Rollback()
					c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"})
					return
				}
			}
		}
		log.Printf("‚úÖ AddGalleryHandler: –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d.", atomic.LoadInt32(&savedFileCount), newGalleryID)

		tagsInputStr := c.PostForm("tagsInput")
		if tagsInputStr != "" {
			tags := strings.Split(tagsInputStr, ",")
			cleanedTags := make([]string, 0, len(tags))
			for _, tag := range tags {
				trimmedTag := strings.TrimSpace(tag)
				if trimmedTag != "" {
					cleanedTags = append(cleanedTags, trimmedTag)
				}
			}

			if len(cleanedTags) > 0 {
				err := AddTagsToGalleryTx(tx, newGalleryID, cleanedTags)
				if err != nil {
					log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è): %v", newGalleryID, err)
					tx.Rollback()
					c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∫ –≥–∞–ª–µ—Ä–µ–µ"})
					return
				} else {
					log.Printf("‚úÖ AddGalleryHandler: –î–æ–±–∞–≤–ª–µ–Ω–æ %d —Ç–µ–≥–æ–≤ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ID=%d.", len(cleanedTags), newGalleryID)
				}
			}
		}
		if err := tx.Commit(); err != nil {
			log.Printf("‚ùå AddGalleryHandler: –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"})
			return
		}

		log.Printf("‚úÖ AddGalleryHandler: –ì–∞–ª–µ—Ä–µ—è '%s' (ID: %d) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.",
			cleanGalleryName, newGalleryID, userID, atomic.LoadInt32(&savedFileCount))

		if len(imageErrors) > 0 {
			c.JSON(http.StatusOK, gin.H{
				"ok":          false,
				"message":     fmt.Sprintf("–ì–∞–ª–µ—Ä–µ—è '%s' —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.", cleanGalleryName),
				"galleryName": cleanGalleryName,
				"imageCount":  atomic.LoadInt32(&savedFileCount),
				"galleryID":   newGalleryID,
				"userID":      userID,
				"errors":      imageErrors,
			})
		} else {
			c.JSON(http.StatusOK, gin.H{
				"ok":          true,
				"message":     "–ì–∞–ª–µ—Ä–µ—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
				"galleryName": cleanGalleryName,
				"imageCount":  atomic.LoadInt32(&savedFileCount),
				"galleryID":   newGalleryID,
				"userID":      userID,
			})
		}
	}
}

func byteCountToHuman(b int64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(b)/float64(div), "KMGTPE"[exp])
}
func generateShortUUID() string {
	return strings.ReplaceAll(uuid.New().String(), "-", "")[:8]
}

var UPLOADS_BASE_PATH_FOR_WRITING string

func AddTagsToGalleryTx(tx *sql.Tx, galleryID int64, tags []string) error {
	if len(tags) == 0 {
		return nil
	}

	for _, tag := range tags {
		_, err := tx.Exec(
			"INSERT INTO tags (gallery_id, tag) VALUES ($1, $2)",
			galleryID,
			strings.ToLower(strings.TrimSpace(tag)),
		)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ '%s': %w", tag, err)
		}
	}
	return nil
}

func GalleryExistsForUser(db *sql.DB, galleryName string, userID int64) (bool, error) {
	var count int
	query := `SELECT COUNT(*) FROM galleries WHERE LOWER(name) = LOWER($1) AND user_id = $2`
	err := db.QueryRow(query, galleryName, userID).Scan(&count)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: %w", err)
	}
	return count > 0, nil
}

func sanitizeFilename(filename string) string {
	reg := regexp.MustCompile(`[^\p{L}\p{N}\-_\.]+`)
	return reg.ReplaceAllString(filename, "_")
}

func AuthMiddleware(db *sql.DB, botToken string) gin.HandlerFunc {
	if botToken == "" {
		log.Fatal("‚ùå AuthMiddleware: TELEGRAM_BOT_TOKEN –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.")
	}

	return func(c *gin.Context) {
		log.Printf("AuthMiddleware: –ó–∞–ø—Ä–æ—Å: %s %s", c.Request.Method, c.Request.URL.Path)

		var initDataRaw string
		var parsedInitData initdata.InitData

		initDataRaw = c.GetHeader("X-Telegram-Init-Data")
		if initDataRaw != "" {
			log.Printf("DEBUG: AuthMiddleware: InitData –ø–æ–ª—É—á–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Init-Data.")
		} else {
			if strings.Contains(c.Request.Header.Get("Content-Type"), "application/json") {
				var requestBody struct {
					InitData string `json:"initData"`
				}
				if err := c.ShouldBindJSON(&requestBody); err == nil {
					initDataRaw = requestBody.InitData
					if initDataRaw != "" {
						log.Printf("DEBUG: AuthMiddleware: InitData –ø–æ–ª—É—á–µ–Ω –∏–∑ JSON-—Ç–µ–ª–∞.")
					} else {
						log.Printf("DEBUG: AuthMiddleware: JSON-—Ç–µ–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –Ω–æ initData –≤ –Ω–µ–º –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
					}
				} else {
					log.Printf("DEBUG: AuthMiddleware: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ç–µ–ª–∞ –¥–ª—è initData: %v", err)
				}
			}
		}

		if initDataRaw == "" && (c.Request.Method == "POST" || c.Request.Method == "PUT") {
			initDataRaw = c.PostForm("initData")
			if initDataRaw != "" {
				log.Printf("DEBUG: AuthMiddleware: InitData –ø–æ–ª—É—á–µ–Ω –∏–∑ PostForm.")
			} else {
				log.Println("DEBUG: AuthMiddleware: InitData –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ JSON-—Ç–µ–ª–µ, –Ω–∏ –≤ PostForm.")
			}
		}

		if initDataRaw != "" {
			err := initdata.Validate(initDataRaw, botToken, 24*time.Hour)
			if err != nil {
				log.Printf("‚ùå AuthMiddleware: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: %v", err)
				c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram."})
				c.Abort()
				return
			}
			log.Println("‚úÖ AuthMiddleware: initData —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω.")

			parsedInitData, err = initdata.Parse(initDataRaw)
			if err != nil {
				log.Printf("‚ùå AuthMiddleware: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."})
				c.Abort()
				return
			}

			if parsedInitData.User.ID == 0 {
				log.Println("‚ùå AuthMiddleware: –í –≤–∞–ª–∏–¥–Ω–æ–º initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (User - nil –∏–ª–∏ User.ID=0).")
				c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "user data missing or invalid in initData"})
				c.Abort()
				return
			}

			userID := parsedInitData.User.ID
			username := parsedInitData.User.Username
			firstName := parsedInitData.User.FirstName
			lastName := parsedInitData.User.LastName
			photoURL := parsedInitData.User.PhotoURL

			log.Printf("‚úÖ AuthMiddleware: initData —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d. UserID: %d, Username: %s, Name: %s %s, PhotoURL: %s",
				userID, userID, username, firstName, lastName, photoURL)

			dbUser, err := db2.FindOrCreateUser(db, userID, username, firstName, lastName, photoURL)
			if err != nil {
				log.Printf("‚ùå AuthMiddleware: –û—à–∏–±–∫–∞ –ø—Ä–∏ FindOrCreateUser: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"ok": false, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ."})
				c.Abort()
				return
			}
			log.Printf("‚úÖ AuthMiddleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î (ID: %d) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω/—Å–æ–∑–¥–∞–Ω.", dbUser.TelegramUserID)

			c.Set("userID", userID)
			c.Set("telegramUsername", dbUser.TelegramUsername.String)
			c.Set("firstName", dbUser.FirstName.String)
			c.Set("lastName", dbUser.LastName.String)
			c.Set("photoURL", dbUser.PhotoURL.String)
			c.Set("dbUser", dbUser)

		} else {
			log.Println("‚ùå AuthMiddleware: InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
			c.JSON(http.StatusUnauthorized, gin.H{"ok": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
			c.Abort()
			return
		}

		c.Next()
	}
}
